API nuoroda: https://jsonplaceholder.typicode.com

1. Sukurti vartotojų puslapį (users.html), kuriame būtų atvaizduotas vartotojų sąrašas.
  1.1. Prie vartotojo turėtu būti jo vardas.
  1.2. Paspaudus ant vartotojo - nukreipiama į jo user.html puslapį.
  1.3. Prie vartotojo vardo turėtų būti parašytų post'ų skaičius.

2. Sukurti puslapį, kuriame bus atvaizduojami įrašai (posts). Kiekvienas įrašas turi:
  2.1. Pavadinimą. Tai turi būti nuoroda. Ji turi vesti į post.html puslapį.
  2.2. Autorių. Tai turi būti nuoroda. Ji turi vesti į user.html puslapį.
  2.3. Prie pavadinimo pridėti įrašo komentarų skaičių.

3. Tokiu pačiu principu, kaip ir vartotojų bei įrašų puslapiams, sukurti puslapį albumams (albums.html). Prie kiekvieno albumo turi būti:
  3.1. Parašytas jo pavadinimas.
  3.2. Parašytas vartotojo, sukūrusio šį albumą, vardas.
  3.3. Albume esančių nuotraukų skaičius.
  3.4. Viena nuotrauka.
  3.5. Šis elementas turi būti nuoroda.

4. Sukurti navigacijos elementą, kuris nukreips į puslapius:
  4.1. Home / pagrindinis puslapis.
  4.2. Users / vartotojų puslapis.
  4.3. Albums / albumų puslapis.
  4.4. Posts / pranešimų puslapis.
  4.5. Pakeisti aktyvaus puslapio nuorodos stilių.

5. Sukurti naują puslapį user.html, kuriame bus atvaizduojama vartotojo informacija:
  5.1. Pilnas vardas.
  5.2. Vartotojo vardas / nick'as.
  5.3. El. paštas.
  5.4. Adresas, kuris turės gatvę, namo numerį, miestą, pašto kodą. Paspaudus ant adreso, pagal koordinates, turėtų atidaryti šios vietos Google Maps.
  5.5. Telefono numeris.
  5.6. Internetinio puslapio adresas.
  5.7. Įmonės, kurioje dirba, pavadinimas.
































1. Sukurti puslapį, kuriame bus atvaizduojami įrašai (posts). Kiekvienas įrašas turi:
  1.1. Pavadinimą.
  1.2. Pastraipą su įrašo (post) turiniu.
  1.3. Autorių. Tai turi būti nuoroda. Kol kas ji gali niekur nevesti.



2. Po kiekvienu įrašu (post) gali būti komentarų (sukurti variantus įrašui, kuris neturi komentarų, kuris turi vieną komentarą ir kuris turi daugiau nei vieną komentarą). Kiekvienas komentaras turi:
  2.1. Komentaro pavadinimą.
  2.2. Komentaro turinį - pastraipą.
  2.3. Komentarą parašiusio asmens el. pašto adresą.



4. Šiame puslapyje turės būti atvaizduojama:
  4.1. Visi vartotojo parašyti įrašai (posts). Post'ų įrašuose nereikia atvaizduoti komentarų. Kiekvienas post'as turi turėti nuorodą.
  4.2. Visi vartotojo sukurti foto albumai. Kiekvienas albumas turės:
    4.2.1. Albumo pavadinimą, kuris turi būti nuoroda. Kol kas nuoroda gali niekur nevesti.

5. Pagrindiniame (index.html) puslapyje pridėti skiltį, kurioje atvaizduojamas albumų sąrašas. Kiekvienas albumas turės:
  5.1. Pavadinimą, o paspaudus ant jo - nukreipiama į albumą (album.html).
  5.2. Albumo autoriaus vardą.
  5.3. Nuotrauką.

6. Sukurti naują puslapį album.html ir jame atvaizduoti:
  6.1. Albumo pavadinimą.
  6.2. Album autoriaus vardą. Paspaudus ant vardo - nukreipiama į autoriaus puslapį.
  6.3. Skiltis, kurioje atvaizduojamos visos albumo nuotraukos. Panaudoti library (biblioteką), kuri skirta gražiam galerijos atvaizdavimui, pvz.:
    6.3.1. https://photoswipe.com/
    6.3.2. https://nanogallery2.nanostudio.org/
    6.3.3. https://sachinchoolur.github.io/lightgallery.js/
    6.3.4. Arba bet kurią kitą.

7. Sukurti naują puslapį post.html ir jame atvaizduoti:
  7.1. Įrašo (post) pavadinimą.
  7.2. Autoriaus vardą. Paspaudus ant autoriaus vardo, turėtų atidaryti autoriaus puslapį.
  7.3. Įrašo turinį.
  7.4. Įrašo komentarus. Komentarai turi būti atvaizduojami tokiu pačiu principu kaip ir pagrindiniame puslapyje.
  7.5. Nuoroda „Kiti autoriaus įrašai", kurią paspaudus bus nukreipiama į naują puslapį posts.html. Jame bus atvaizduojami visi šio vartotojo įrašai.







11. Sukurti paieškos funkcionalumą navigacijos elemente:
11.1. Navigacijos elemente sukurti formą, kuri turi text tipo input elementą (nepamiršti pridėti name atributą).
11.2. Formos submit metu, naudojant action atributą, nukreipti į naują puslapį (search.html).
11.3. Šiame puslapyje atvaizduoti paieškos rezultatą.
11.3.1. Jeigu nėra tinkamų rezultatų, tai parašyti jog rezultatų pagal užklausą nerasta.
11.4. Filtruoti pagal:
11.4.1. Tikslų vartotojo username.
11.4.2. Jeigu neranda pagal username, tada pagal tikslų vartotojo pilną vardą.
11.4.3. Jeigu neranda pagal username arba pagal tikslu vartotojo pilna vardą, tada pagal tikslų vartotojo el. paštą.
11.4.4. Tikslų post'o pavadinimą.
11.4.5. Tikslų albumo pavadinimą.

Papildoma: 
11.5. Search puslapyje turi būti paieškos forma, kuri veikia neperkraunant puslapio.
11.6. Sukurti filtravimo galimybę iš dalies frazės, o ne tik pagal tikslią frazę.

12. Sukurti puslapį create-post.html
12.1 Puslapyje sukurti formą. Ji turės:
12.1.1. Input elementą posto pavadinimui įvesti.
12.1.2. Textarea elementą posto turiniui įvesti.
12.1.3. Select elementą, kuriame būtų atvaizduojami visų vartotojų vardai (option elementų value naudoti vartotojų id).
12.2. Formos submit metu:
12.2.1. Iš formos duomenų suformuluoti objektą pagal API reikalavimus.
12.2.2. Su šiais duomenimis išsiųsti POST užklausą pagal API reikalavimus.
12.2.3. Iš užklausos atsakymo gautų duomenų suformoluoti HTML elementą ir juos išvesti į ekraną.

13.1. Prie kiekvieno post'o pridėti nuorodą.
13.1.1. Nuorodos tekstas: „Redaguoti" arba bet koks kitas jūsų pasirinktas.
13.1.2. Nuoroda turi nuvestį į edit-post.html puslapį.
13.1.3. Nuoroda turi perduoti redaguojamo post'o ID.

13.2. Sukurti puslapį edit-post.html
13.2.1. Iš nuorodos išimti post'o ID.
13.2.2. Iš API gauti visą post'o informaciją pagal post'o ID.

13.3. Puslapyje sukurti formą. Ji turės:
13.3.1. Input elementą posto pavadinimui įvesti.
13.3.2. Textarea elementą posto turiniui įvesti.
13.3.3. Select elementą, kuriame būtų atvaizduojami visų vartotojų vardai (option elementų value naudoti vartotojų id).
13.3.4. Iš API gautais duomenimis (13.2.2. užduotis) užpildyti formą.

13.4. Formos submit metu:
13.4.1. Iš formos duomenų suformuluoti objektą pagal API reikalavimus.
13.4.2. Su šiais duomenimis išsiųsti PUT užklausą pagal API reikalavimus.
13.4.3. Iš užklausos atsakymo gautų duomenų suformoluoti HTML elementą ir juos išvesti į ekraną.

KOMENTARAI:
14.1.1. Po posto komentarais, sukurti formą, kurioje būtų galima sukurti naują komentarą.
14.1.2. Sukurtą komentarą nusiųsti į API (POST metodas).
14.1.3. Iš API gautą rezultatą pridėti prie ankstesnių komentarų.

14.2.1. Prie kiekvieno komentaro pridėti mygtuką „Redaguoti".
14.2.2. Paspaudus šį mygtuką, komentaro formą (14.1.1. užduotis) užpildyti komentaro turiniu.
14.2.3. Redaguotą komentarą nusiųsti į API (PUT metodas).
14.2.4. Iš API gauto rezultato turiniu pakeisti redaguotą komentarą.

PAGINATION:
15.1. Puslapiuose, kuriuose atvaizuojami post'ai, atvaizduoti pirmus 25 post'us. Tai bus pirmas post'ų puslapis.
15.2.1. Post'ų sąrašo apačioje pridėti nuorodas, kurios leidžia perjungti kitą post'ų puslapį. Pvz. antras puslapis rodys post'us nuo 26 iki 50, trečias puslapis rodys nuo 51 iki 75 ir t.t.
15.2.2. Puslapių nuorodų turi būti tiek, kad būtų galimybė atvaizduoti visus post'us.
15.2.3. Galima paspausti ant visų nuorodų, išskyrus tą, kurios puslapyje šiuo metu esama.

15.3.1. Sukurti nuorodas pirmam ir paskutiniam puslapiui.
15.3.2. Jeigu šiuo metu esama pirmame puslapyje, tai jo nuorodos paspausti negalima.
15.3.3. Jeigu šiuo metu esama paskutiniame puslapyje, tai jo nuorodos paspausti negalima.

15.4.1. Sukurti nuorodas kitam ir praejusiam puslapiams (previous ir next).
15.4.2. Jeigu esama trečiame puslapyje, tai previous puslapis turi būti antras, o next puslapis turi būti ketvirtas.
15.4.3. Jeigu šiuo metu esama pirmame puslapyje, tai previous nuorodos paspausti negalima.
15.4.4. Jeigu šiuo metu esama paskutiniame puslapyje, tai next nuorodos paspausti negalima.

15. Panaudoti pagination kituose puslapiuose, kuriuose yra sąrašas duomenų.

16. Sukurti select elementą, kuriame būtų galimybė pasirinkti po kiek postų (arba kitų duomenų) yra atvaizduojama viename puslapyje.